@page "/CreatePost"
@using Domain.DTOs
@using HttpClients.ClientInterfaces
@using System.Security.Claims
@using ForumClient.Auth
@inject IAuthService authService;
@inject IPostService postService;
@inject NavigationManager navMgr;
@inject AuthenticationStateProvider auth;

@attribute [Authorize]
 
        <h3>Create Post</h3>
        <div class="card">
             
            <div class="form-group field">
                <label>Title:</label>
                <input type="text" @bind="postTitle"/>
            </div>
            <div class="form-group field">
                <label>Post description:</label>
                <input type="text" height="50" @bind="postBody"/>
            </div>

            <div class="button-row">
                @if (!string.IsNullOrEmpty(msg))
                {
                    <label style="color: red">@msg</label>
                }
                <button @onclick="Create" class="btn">Create</button>
            </div>

        </div> 
@if (showModal)
{
    
<Modal ShowModal="showModal">
    <p>You have successfully created a new post.</p>
    <button @onclick="@Proceed">View post</button>
</Modal>
}
@code {
    [CascadingParameter]
    public Task<AuthenticationState> AuthState { get; set; } = null!;
    
    private IEnumerable<Claim>? userClaims;
    private bool isLoggedIn;
    private int? userId;
    private string postTitle = "";
    private string postBody = "";
    
    private string msg = "";
    
    private bool showModal = false;
    
    protected override async Task OnInitializedAsync()
    {
        msg = "";
        try
        {
            AuthenticationState authState = await AuthState;
            ClaimsPrincipal user = authState.User;
            isLoggedIn = user.Identity != null;
        
            if (!isLoggedIn) return;
        
            userClaims = user.Claims;
            string name = user.Identity!.Name!;
            Console.WriteLine(name);
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            msg = e.Message;
        }
    }

    private async Task Create()
    {
        try
        {
        //string name = auth.GetAuthenticationStateAsync().Result.User.Identity.Name;        
        string userId = auth.GetAuthenticationStateAsync().Result.User.Claims.Single(x => x.Type == "UserId").Value;
        Console.WriteLine("ID = " + userId);
        msg = "";
        if (userId == null)
        {
            msg = "Please log in first!";
            return;
        }
        if (string.IsNullOrEmpty(postTitle))
        {
            msg = "Title cannot be empty!";
            return;
        }
        if (string.IsNullOrEmpty(postBody))
        {
            msg = "Please provide a post description!";
            return;
        }

       
            PostCreationDto dto = new(int.Parse(userId), postTitle, postBody);
            await postService.Create(dto);
            showModal = true;
            // navMgr.NavigateTo("/");
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            msg = e.Message;
        }
    }
    
    private void Proceed()
    {
        showModal = false;
        navMgr.NavigateTo("/ViewPosts");
    }
}